/** A root class that can be used to defined a N-dimeension vector */
export declare class VectorClass<T extends readonly unknown[]> {
    values: T;
    constructor(values: T);
    toString(): string;
    toJSON(): string;
    [Symbol.iterator](): Iterator<T[0]>;
}
declare type Tuple<T> = readonly [T, ...T[]];
declare type MappedArray<T, U> = {
    [key in keyof T]: U;
};
/**
 * Transforms a number into an absolute coordinate.
 *
 * @example
 *
 * abs(0) => '0'
 *
 * abs(5.5) => '5.5'
 *
 * @alias {@link absolute}
 * @see {@link relative} for relative coordinates (e.g. `~10`)
 * @see {@link local} for local coordinates (e.g. `^10`)
 */
export declare function absolute(coordinate?: number): string;
/**
 * Transforms numbers into absolute coordinates.
 *
 * @example
 *
 * abs(0, 0, 0) => ['0', '0', '0']
 *
 * abs(0, 180) => ['0', '180']
 *
 * abs(-1, 10, 5) => ['-1', '10', '5']
 *
 * @alias {@link absolute}
 * @see {@link relative} for relative coordinates (e.g. `~10`)
 * @see {@link local} for local coordinates (e.g. `^10`)
 */
export declare function absolute<T extends Tuple<number>>(...coordinates: T): VectorClass<MappedArray<T, string>>;
/**
 * Transforms a number into a relative coordinate, using the tilde notation `~`.
 *
 * @example
 *
 * rel(0) => '~'
 *
 * rel(5.5) => '~5.5'
 *
 * rel(-1) => '~-1'
 *
 * @alias {@link relative}
 * @see {@link absolute} for absolute coordinates (e.g. `10`)
 * @see {@link local} for local coordinates (e.g. `^10`)
 */
export declare function relative(coordinate: number): `~${string}`;
/**
 * Transforms numbers into relative coordinates, using the tilde notation `~`.
 *
 * @example
 *
 * rel(0, 0, 0) => ['~', '~', '~']
 *
 * rel(0, 180) => ['~', '~180']
 *
 * rel(-1, 10, 5) => ['~-1', '~10', '~5']
 *
 * @alias {@link relative}
 * @see {@link absolute} for absolute coordinates (e.g. `10`)
 * @see {@link local} for local coordinates (e.g. `^10`)
 */
export declare function relative<T extends Tuple<number>>(...coordinates: T): VectorClass<MappedArray<T, `~${string}`>>;
/**
 * Transforms a number into a local coordinate, using the caret notation `^`.
 *
 * @example
 *
 * loc(0) => '^'
 *
 * loc(5.5) => '^5.5'
 *
 * loc(-1) => '^-1'
 *
 * @alias {@link local}
 * @see {@link absolute} for absolute coordinates (e.g. `10`)
 * @see {@link relative} for relative coordinates (e.g. `~10`)
 */
export declare function local(coordinate: number): `^${string}`;
/**
 * Transforms numbers into local coordinates, using the tilde notation `^`.
 *
 * First coordinate is leftward, second is upward, third is frontward.
 *
 * @example
 *
 * loc(0, 0, 0) => ['^', '^', '^']
 *
 * loc(0, 180, 0) => ['^', '^180', '^']
 *
 * loc(-1, 10, 5) => ['^-1', '^10', '^5']
 *
 * @alias {@link local}
 * @see {@link absolute} for absolute coordinates (e.g. `10`)
 * @see {@link relative} for relative coordinates (e.g. `~10`)
 */
export declare function local<T extends Tuple<number>>(...coordinates: T): VectorClass<MappedArray<T, `^${string}`>>;
export {};
