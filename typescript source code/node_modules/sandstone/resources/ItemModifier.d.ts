import { ResourceInstance } from './Resource';
import type { BASIC_CONFLICT_STRATEGIES } from "../generalTypes";
import type { CONTAINER_SLOTS, Coordinates, ItemModifierJSON } from "../arguments";
import type { Datapack } from "../datapack";
import type { ENTITY_SLOTS, MultipleEntitiesArgument } from '..';
export declare type ItemModifierOptions = {
    /**
     * What to do if another Item modifier has the same name.
     *
     * - `throw`: Throw an error.
     * - `replace`: Replace silently the old Predicate with the new one.
     * - `ignore`: Keep silently the old Predicate, discarding the new one.
     */
    onConflict?: BASIC_CONFLICT_STRATEGIES;
};
export declare class ItemModifierInstance extends ResourceInstance {
    modifierJSON: ItemModifierJSON;
    constructor(datapack: Datapack, name: string, modifier: ItemModifierJSON, options?: ItemModifierOptions);
    get modify(): {
        /**
         * @param pos The position of the container containing the slot to apply the modifier to.
         * @param slot The slot to apply the modifier to.
         */
        block: (pos: Coordinates, slot: CONTAINER_SLOTS) => void;
        /**
         * @param targets The entity/entities containing the slot to apply the modifier to.
         * @param slot The slot to apply the modifier to.
         * @param modifier The name of the modifier.
         */
        entity: (targets: MultipleEntitiesArgument, slot: ENTITY_SLOTS) => void;
    };
}
